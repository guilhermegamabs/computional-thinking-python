{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOput92KbUZz+i5q6XArKcL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":[],"metadata":{"id":"ZV2rKQXoeOPT"}},{"cell_type":"markdown","source":["Turma **1TIAPZ-2025**\n","\n","Integrantes:\n","\n","Carolina Novakc Moraes - RM: 565621\n","\n","Felipe Ferraz Viera - RM: 561451\n","\n","Guilherme Gama Bitencourt Souza - RM: 565293\n","\n","Guilherme Ribeiro Slaviero - RM: 561757\n"],"metadata":{"id":"ehZeRczHeQtR"}},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"SnbfFCZqajxI","executionInfo":{"status":"ok","timestamp":1744555678024,"user_tz":180,"elapsed":1593,"user":{"displayName":"Guilherme Gama","userId":"05942645589679753343"}},"outputId":"b6d5ce58-ba39-451b-d171-56587c7cb7a0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   ID_Transacao        Valor Tipo_Transacao Localizacao    Horario  Fraude\n","0             1  4585.968933      Pagamento          PR      Manha       0\n","1             2  3090.412574  Transferencia          RS      Manha       0\n","2             3  2322.555580      Pagamento          RS  Madrugada       0\n","3             4  2781.471272      Pagamento          SP      Manha       0\n","4             5  8174.175771  Transferencia          PR      Manha       1"],"text/html":["\n","  <div id=\"df-8339e749-cca8-4053-b684-d42afc32b168\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>ID_Transacao</th>\n","      <th>Valor</th>\n","      <th>Tipo_Transacao</th>\n","      <th>Localizacao</th>\n","      <th>Horario</th>\n","      <th>Fraude</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>4585.968933</td>\n","      <td>Pagamento</td>\n","      <td>PR</td>\n","      <td>Manha</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>3090.412574</td>\n","      <td>Transferencia</td>\n","      <td>RS</td>\n","      <td>Manha</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>2322.555580</td>\n","      <td>Pagamento</td>\n","      <td>RS</td>\n","      <td>Madrugada</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>2781.471272</td>\n","      <td>Pagamento</td>\n","      <td>SP</td>\n","      <td>Manha</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>8174.175771</td>\n","      <td>Transferencia</td>\n","      <td>PR</td>\n","      <td>Manha</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8339e749-cca8-4053-b684-d42afc32b168')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8339e749-cca8-4053-b684-d42afc32b168 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8339e749-cca8-4053-b684-d42afc32b168');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fd2d64ca-c094-4a40-8bff-93f9e8cca293\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fd2d64ca-c094-4a40-8bff-93f9e8cca293')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fd2d64ca-c094-4a40-8bff-93f9e8cca293 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 5000,\n  \"fields\": [\n    {\n      \"column\": \"ID_Transacao\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1443,\n        \"min\": 1,\n        \"max\": 5000,\n        \"num_unique_values\": 5000,\n        \"samples\": [\n          1502,\n          2587,\n          2654\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Valor\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2863.5113254680587,\n        \"min\": 10.522070301477582,\n        \"max\": 9999.798852447077,\n        \"num_unique_values\": 5000,\n        \"samples\": [\n          6298.249246067237,\n          2473.9153822310254,\n          5803.041638812409\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Tipo_Transacao\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Pagamento\",\n          \"Transferencia\",\n          \"Compra\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Localizacao\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"PR\",\n          \"RS\",\n          \"MG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Horario\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Madrugada\",\n          \"Noite\",\n          \"Manha\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fraude\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":2}],"source":["import pandas as pd\n","import numpy as np\n","\n","# Criando um dataset fictício\n","np.random.seed(35)\n","n = 5000\n","df = pd.DataFrame({\n","    'ID_Transacao': range(1, n+1),\n","    'Valor': np.random.uniform(10, 10000, n),\n","    'Tipo_Transacao': np.random.choice(['Compra', 'Transferencia', 'Pagamento'], n),\n","    'Localizacao': np.random.choice(['SP', 'RJ', 'MG', 'RS', 'BA', 'PR'], n),\n","    'Horario': np.random.choice(['Manha', 'Tarde', 'Noite', 'Madrugada'], n),\n","    'Fraude': np.random.choice([0, 1], n, p=[0.7, 0.3])\n","})\n","\n","df.head()"]},{"cell_type":"code","source":["# 1 - Realizar uma amostragem aleatória simples com 500 registros.\n","amostra_aleatoria_simples = df.sample(n=500)\n","print(amostra_aleatoria_simples)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q_8IkY64hlN8","executionInfo":{"status":"ok","timestamp":1744555680400,"user_tz":180,"elapsed":3,"user":{"displayName":"Guilherme Gama","userId":"05942645589679753343"}},"outputId":"3350828f-94a6-4fb1-e77c-48c474578878"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["      ID_Transacao        Valor Tipo_Transacao Localizacao    Horario  Fraude\n","814            815  9497.782718         Compra          RJ  Madrugada       0\n","2749          2750  3468.535406      Pagamento          PR      Manha       0\n","3579          3580  8029.225486  Transferencia          PR      Noite       1\n","3609          3610  7803.634261         Compra          PR      Manha       0\n","2765          2766  5184.904031         Compra          MG  Madrugada       1\n","...            ...          ...            ...         ...        ...     ...\n","4057          4058  3602.806573      Pagamento          SP      Tarde       1\n","2194          2195  9595.719304  Transferencia          MG      Noite       0\n","3661          3662  6448.615797  Transferencia          RS      Noite       1\n","3120          3121  7067.703857      Pagamento          RS      Tarde       0\n","4642          4643   463.851735      Pagamento          SP      Noite       1\n","\n","[500 rows x 6 columns]\n"]}]},{"cell_type":"code","source":["# 2 - Criar uma amostragem sistemática escolhendo cada 10º registro.\n","amostra_sistematica = df.iloc[::10]\n","print(amostra_sistematica)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SU6LuH1YhuAc","executionInfo":{"status":"ok","timestamp":1744238912684,"user_tz":180,"elapsed":6,"user":{"displayName":"Guilherme Gama","userId":"05942645589679753343"}},"outputId":"9731c6a6-b54c-4a3b-84e5-aa125826c8d7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["      ID_Transacao        Valor Tipo_Transacao Localizacao    Horario  Fraude\n","0                1  4585.968933      Pagamento          PR      Manha       0\n","10              11  7969.207012         Compra          MG      Noite       1\n","20              21  1487.560044  Transferencia          SP      Tarde       1\n","30              31  8245.068645         Compra          RJ      Manha       0\n","40              41  6433.909248      Pagamento          RS      Manha       0\n","...            ...          ...            ...         ...        ...     ...\n","4950          4951  3879.704153         Compra          RJ      Tarde       1\n","4960          4961  3162.141721      Pagamento          BA  Madrugada       0\n","4970          4971  3242.757612      Pagamento          RS  Madrugada       1\n","4980          4981  9026.356702      Pagamento          MG      Tarde       1\n","4990          4991   859.158479      Pagamento          BA      Tarde       0\n","\n","[500 rows x 6 columns]\n"]}]},{"cell_type":"code","source":["# 3 - Dividir a base em estratos por localização e selecionar amostras proporcionais.\n","from sklearn.model_selection import train_test_split\n","amostra_estratificada, _ = train_test_split(df, test_size=0.9, stratify=df['Localizacao'])\n","print(amostra_estratificada)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gil2vqI_ihKt","executionInfo":{"status":"ok","timestamp":1744238924867,"user_tz":180,"elapsed":10,"user":{"displayName":"Guilherme Gama","userId":"05942645589679753343"}},"outputId":"97225e70-28fc-4ce4-990f-201f4f49bc27"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["      ID_Transacao        Valor Tipo_Transacao Localizacao    Horario  Fraude\n","1414          1415  2760.717647         Compra          MG      Manha       0\n","1408          1409  1132.290171      Pagamento          RJ      Noite       1\n","3741          3742  4191.401289         Compra          RS      Noite       0\n","4086          4087  8981.804625  Transferencia          RS      Tarde       0\n","3078          3079  5292.241816      Pagamento          SP      Manha       1\n","...            ...          ...            ...         ...        ...     ...\n","1480          1481  1931.557403      Pagamento          RS      Manha       1\n","890            891  8585.041105  Transferencia          MG  Madrugada       1\n","2719          2720  7917.660869  Transferencia          PR      Tarde       0\n","3170          3171   444.326482         Compra          RS      Noite       1\n","4998          4999  6920.109088      Pagamento          BA      Tarde       0\n","\n","[500 rows x 6 columns]\n"]}]},{"cell_type":"code","source":["# 4 - Selecionar aleatoriamente transações fraudulentas e comparar com transações não fraudulentas.\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","\n","amostra_fraude = df[df['Fraude'] == 1].sample(n=15)\n","amostra_nao_fraude = df[df['Fraude'] == 0].sample(n=15)\n","\n","amostra_comparacao = pd.concat([amostra_fraude, amostra_nao_fraude])\n","\n","sns.boxplot(data=amostra_comparacao, x='Fraude', y='Valor')\n","plt.xticks([0, 1], ['Não Fraude', 'Fraude'])\n","plt.title('Comparação de Valor entre Transações Fraudulentas e Não Fraudulentas')\n","plt.show()\n","\n","print(amostra_comparacao)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"ZHs07oW2k7r1","executionInfo":{"status":"ok","timestamp":1744238940980,"user_tz":180,"elapsed":192,"user":{"displayName":"Guilherme Gama","userId":"05942645589679753343"}},"outputId":"a9f7cb20-605c-412a-d08c-ae50b836d1e8"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["      ID_Transacao        Valor Tipo_Transacao Localizacao    Horario  Fraude\n","1765          1766  1875.603613  Transferencia          SP      Noite       1\n","946            947  2415.820575      Pagamento          PR      Manha       1\n","2055          2056  7694.421745         Compra          RS      Noite       1\n","1831          1832  1611.496635  Transferencia          SP  Madrugada       1\n","4994          4995  4925.583376         Compra          RJ      Noite       1\n","3825          3826  1680.594978         Compra          BA      Manha       1\n","1933          1934  7873.434008         Compra          MG      Tarde       1\n","4231          4232   429.654862  Transferencia          RS      Tarde       1\n","3192          3193  5413.505435      Pagamento          BA  Madrugada       1\n","106            107  4011.788007  Transferencia          SP      Manha       1\n","2321          2322  6593.242353  Transferencia          SP      Noite       1\n","427            428  4491.779789         Compra          RS  Madrugada       1\n","3644          3645  2060.228816      Pagamento          RJ      Tarde       1\n","2407          2408  5780.062576  Transferencia          SP      Manha       1\n","4863          4864  6333.375740      Pagamento          MG      Tarde       1\n","1454          1455  9616.475416  Transferencia          PR      Manha       0\n","2171          2172  4597.870259         Compra          SP  Madrugada       0\n","3027          3028  7550.610508  Transferencia          MG      Noite       0\n","2089          2090  3622.136599  Transferencia          RJ  Madrugada       0\n","4482          4483  4953.210618  Transferencia          RJ      Manha       0\n","2908          2909  4628.343731      Pagamento          RJ      Noite       0\n","2556          2557   102.548585         Compra          SP      Tarde       0\n","944            945  8430.166745      Pagamento          SP  Madrugada       0\n","1172          1173  9224.115822  Transferencia          MG  Madrugada       0\n","4524          4525  5502.106915  Transferencia          PR      Manha       0\n","3055          3056  3557.834481      Pagamento          PR      Tarde       0\n","4931          4932  9121.820879      Pagamento          MG      Manha       0\n","3511          3512  5394.269950         Compra          BA      Manha       0\n","2178          2179  8880.920718         Compra          BA  Madrugada       0\n","1445          1446  8229.024262  Transferencia          RS      Tarde       0\n"]}]},{"cell_type":"code","source":["# 5 - Criar um subconjunto de dados com base em amostragem por julgamento para transações acima de R$5000.\n","amostra_julgamento = df[df['Valor'] > 5000]\n","print(\"\\nAmostra por Julgamento:\")\n","print(amostra_julgamento)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"btf8LkaWlLPS","executionInfo":{"status":"ok","timestamp":1744238991452,"user_tz":180,"elapsed":46,"user":{"displayName":"Guilherme Gama","userId":"05942645589679753343"}},"outputId":"30864e94-11b7-4ccd-f18f-5c5f13557a84"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Amostra por Julgamento:\n","      ID_Transacao        Valor Tipo_Transacao Localizacao    Horario  Fraude\n","4                5  8174.175771  Transferencia          PR      Manha       1\n","6                7  6268.107917         Compra          RS  Madrugada       1\n","8                9  6824.924995         Compra          BA      Noite       0\n","9               10  6792.918131      Pagamento          RS      Tarde       0\n","10              11  7969.207012         Compra          MG      Noite       1\n","...            ...          ...            ...         ...        ...     ...\n","4991          4992  5726.081056      Pagamento          RJ      Noite       0\n","4992          4993  6002.942378         Compra          MG  Madrugada       0\n","4995          4996  5758.434647  Transferencia          RS  Madrugada       0\n","4996          4997  7346.578266         Compra          SP  Madrugada       0\n","4998          4999  6920.109088      Pagamento          BA      Tarde       0\n","\n","[2512 rows x 6 columns]\n"]}]},{"cell_type":"code","source":["# 6 - Aplicar amostragem por conglomerados dividindo os dados por tipo de transação e sorteando um grupo.\n","clusters = df.groupby('Tipo_Transacao')\n","grupo_sorteado = np.random.choice(list(clusters.groups.keys()))\n","amostra_conglomerados = clusters.get_group(grupo_sorteado)\n","\n","print(\"\\nAmostra por Conglomerados:\")\n","print(amostra_conglomerados)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pQtSBwJ3mx1A","executionInfo":{"status":"ok","timestamp":1744239014992,"user_tz":180,"elapsed":10,"user":{"displayName":"Guilherme Gama","userId":"05942645589679753343"}},"outputId":"455b6447-0d7e-48a1-e207-c844bce5bc41"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Amostra por Conglomerados:\n","      ID_Transacao        Valor Tipo_Transacao Localizacao    Horario  Fraude\n","5                6  1122.352895         Compra          RS      Tarde       0\n","6                7  6268.107917         Compra          RS  Madrugada       1\n","8                9  6824.924995         Compra          BA      Noite       0\n","10              11  7969.207012         Compra          MG      Noite       1\n","12              13  9126.856761         Compra          RJ  Madrugada       0\n","...            ...          ...            ...         ...        ...     ...\n","4992          4993  6002.942378         Compra          MG  Madrugada       0\n","4993          4994   784.060495         Compra          RJ  Madrugada       0\n","4994          4995  4925.583376         Compra          RJ      Noite       1\n","4996          4997  7346.578266         Compra          SP  Madrugada       0\n","4999          5000   209.441241         Compra          RS  Madrugada       1\n","\n","[1680 rows x 6 columns]\n"]}]},{"cell_type":"code","source":["# 7 - Executar uma amostragem por conveniência pegando os 300 primeiros registros.\n","amostra_conveniencia = df.head(300)\n","print(\"\\nAmostra por Conveniência:\")\n","print(amostra_conveniencia)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6qE18Q4moH3x","executionInfo":{"status":"ok","timestamp":1744239022051,"user_tz":180,"elapsed":47,"user":{"displayName":"Guilherme Gama","userId":"05942645589679753343"}},"outputId":"5f3f0b81-f7c9-4374-cb47-bb1493d6d5c7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Amostra por Conveniência:\n","     ID_Transacao        Valor Tipo_Transacao Localizacao    Horario  Fraude\n","0               1  4585.968933      Pagamento          PR      Manha       0\n","1               2  3090.412574  Transferencia          RS      Manha       0\n","2               3  2322.555580      Pagamento          RS  Madrugada       0\n","3               4  2781.471272      Pagamento          SP      Manha       0\n","4               5  8174.175771  Transferencia          PR      Manha       1\n","..            ...          ...            ...         ...        ...     ...\n","295           296  2006.776804      Pagamento          SP      Noite       0\n","296           297  4521.568284      Pagamento          MG  Madrugada       0\n","297           298  4516.509027  Transferencia          SP      Noite       1\n","298           299  9605.587109  Transferencia          PR      Noite       0\n","299           300  8985.175794         Compra          BA  Madrugada       0\n","\n","[300 rows x 6 columns]\n"]}]},{"cell_type":"code","source":["# 8 - Criar uma amostragem por cotas considerando o tipo de transação e localização.\n","# Coloquei para ele garantir pegar até quanto o grupo tem, para não causar problemas\n","amostra_cotas = df.groupby(['Tipo_Transacao', 'Localizacao']).apply(lambda x: x.sample(n=min(len(x), 25))).reset_index(drop=True)\n","print(\"\\nAmostra por Cotas:\")\n","print(amostra_cotas)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"efkg-jCModZB","executionInfo":{"status":"ok","timestamp":1744239031005,"user_tz":180,"elapsed":19,"user":{"displayName":"Guilherme Gama","userId":"05942645589679753343"}},"outputId":"90bf5c25-1826-476a-caa1-bbbce3962951"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Amostra por Cotas:\n","     ID_Transacao        Valor Tipo_Transacao Localizacao    Horario  Fraude\n","0            2207  5449.363986         Compra          BA      Manha       1\n","1            2179  8880.920718         Compra          BA  Madrugada       0\n","2            1433  5475.887265         Compra          BA      Noite       0\n","3            2347  9728.148370         Compra          BA  Madrugada       0\n","4            4377  1153.179322         Compra          BA      Noite       0\n","..            ...          ...            ...         ...        ...     ...\n","445          1031  2444.936540  Transferencia          SP      Manha       1\n","446          4385  7716.558231  Transferencia          SP      Tarde       0\n","447          2972  8544.402603  Transferencia          SP  Madrugada       0\n","448          2752  6612.333456  Transferencia          SP      Noite       0\n","449          4051  2327.083332  Transferencia          SP      Manha       1\n","\n","[450 rows x 6 columns]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-67-079c7cffe562>:3: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n","  amostra_cotas = df.groupby(['Tipo_Transacao', 'Localizacao']).apply(lambda x: x.sample(n=min(len(x), 25))).reset_index(drop=True)\n"]}]},{"cell_type":"code","source":["# 9 - Comparar os resultados das amostras aleatória e estratificada e explicar as diferenças.\n","\n","# Como no exercício da amostra estratificada estamos usando a \"Localização\" como variável, também vamos usar na amostragem aleatória\n","print(\"\\nDistribuição na amostra aleatória simples:\")\n","print(amostra_aleatoria_simples['Localizacao'].value_counts(normalize=True).round(3).to_string())\n","\n","print(\"\\nDistribuição na amostra estratificada:\")\n","print(amostra_estratificada['Localizacao'].value_counts(normalize=True).round(3).to_string())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qLQx_Fncq33F","executionInfo":{"status":"ok","timestamp":1744239097738,"user_tz":180,"elapsed":7,"user":{"displayName":"Guilherme Gama","userId":"05942645589679753343"}},"outputId":"5d83962a-d313-483d-d534-284a7b07d16d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Distribuição na amostra aleatória simples:\n","Localizacao\n","PR    0.267\n","RJ    0.267\n","MG    0.200\n","BA    0.133\n","RS    0.133\n","\n","Distribuição na amostra estratificada:\n","Localizacao\n","SP    0.170\n","RS    0.170\n","BA    0.168\n","MG    0.168\n","PR    0.164\n","RJ    0.160\n"]}]},{"cell_type":"markdown","source":["Explicação:\n","\n","Amostra Aleatória Simples:\n","- Seleciona de forma aleatória, sem contar as características;\n","- Pode gerar desequilíbrio entre as caregorias, pois não tem critério de distribuição;\n","- Ele é usado quando não há preocupação com representividade ou os grupos são bem definidos\n","\n","Amostra Estratificada:\n","- Mantém a proporção original\n","- Garante a presença de todos os grupos ('SP', 'RJ', 'MG', 'RS', 'BA', 'PR')\n","- Ideal quando se deseja garantir que todos os grupos estejam presentes na amostra com a mesma proporção da base original.\n","\n"],"metadata":{"id":"T4crNWd9s9zt"}}]}